import Foundation
import Capstone

struct Code {
    static let armCode1 = Data([0x86, 0x48, 0x60, 0xf4, 0x4d, 0x0f, 0xe2, 0xf4, 0xED, 0xFF, 0xFF, 0xEB, 0x04, 0xe0, 0x2d, 0xe5, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x83, 0x22, 0xe5, 0xf1, 0x02, 0x03, 0x0e, 0x00, 0x00, 0xa0, 0xe3, 0x02, 0x30, 0xc1, 0xe7, 0x00, 0x00, 0x53, 0xe3, 0x00, 0x02, 0x01, 0xf1, 0x05, 0x40, 0xd0, 0xe8, 0xf4, 0x80, 0x00, 0x00])
    static let armCode2 = Data([0xd1, 0xe8, 0x00, 0xf0, 0xf0, 0x24, 0x04, 0x07, 0x1f, 0x3c, 0xf2, 0xc0, 0x00, 0x00, 0x4f, 0xf0, 0x00, 0x01, 0x46, 0x6c])
    static let thumbCode1 = Data([0x60, 0xf9, 0x1f, 0x04, 0xe0, 0xf9, 0x4f, 0x07, 0x70, 0x47, 0x00, 0xf0, 0x10, 0xe8, 0xeb, 0x46, 0x83, 0xb0, 0xc9, 0x68, 0x1f, 0xb1, 0x30, 0xbf, 0xaf, 0xf3, 0x20, 0x84, 0x52, 0xf8, 0x23, 0xf0])
    static let thumbCode2 = Data([0x4f, 0xf0, 0x00, 0x01, 0xbd, 0xe8, 0x00, 0x88, 0xd1, 0xe8, 0x00, 0xf0, 0x18, 0xbf, 0xad, 0xbf, 0xf3, 0xff, 0x0b, 0x0c, 0x86, 0xf3, 0x00, 0x89, 0x80, 0xf3, 0x00, 0x8c, 0x4f, 0xfa, 0x99, 0xf6, 0xd0, 0xff, 0xa2, 0x01])
    static let thumbMClass = Data([0xef, 0xf3, 0x02, 0x80])
    static let armV8 = Data([0xe0, 0x3b, 0xb2, 0xee, 0x42, 0x00, 0x01, 0xe1, 0x51, 0xf0, 0x7f, 0xf5])
    
    static let arm64Code1 = Data([0x09, 0x00, 0x38, 0xd5, 0xbf, 0x40, 0x00, 0xd5, 0x0c, 0x05, 0x13, 0xd5, 0x20, 0x50, 0x02, 0x0e, 0x20, 0xe4, 0x3d, 0x0f, 0x00, 0x18, 0xa0, 0x5f, 0xa2, 0x00, 0xae, 0x9e, 0x9f, 0x37, 0x03, 0xd5, 0xbf, 0x33, 0x03, 0xd5, 0xdf, 0x3f, 0x03, 0xd5, 0x21, 0x7c, 0x02, 0x9b, 0x21, 0x7c, 0x00, 0x53, 0x00, 0x40, 0x21, 0x4b, 0xe1, 0x0b, 0x40, 0xb9, 0x20, 0x04, 0x81, 0xda, 0x20, 0x08, 0x02, 0x8b, 0x10, 0x5b, 0xe8, 0x3c])
    
    static let ppcCode1 = Data([0x43, 0x20, 0x0c, 0x07, 0x41, 0x56, 0xff, 0x17, 0x80, 0x20, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x10, 0x43, 0x23, 0x0e, 0xd0, 0x44, 0x00, 0x80, 0x4c, 0x43, 0x22, 0x02, 0x2d, 0x03, 0x00, 0x80, 0x7c, 0x43, 0x20, 0x14, 0x7c, 0x43, 0x20, 0x93, 0x4f, 0x20, 0x00, 0x21, 0x4c, 0xc8, 0x00, 0x21, 0x40, 0x82, 0x00, 0x14])
    static let ppcCode2 = Data([0x10, 0x60, 0x2a, 0x10, 0x10, 0x64, 0x28, 0x88, 0x7c, 0x4a, 0x5d, 0x0f])
    
    static let x86Code64 = Data([0x55, 0x48, 0x8b, 0x05, 0xb8, 0x13, 0x00, 0x00, 0xe9, 0xea, 0xbe, 0xad, 0xde, 0xff, 0x25, 0x23, 0x01, 0x00, 0x00, 0xe8, 0xdf, 0xbe, 0xad, 0xde, 0x74, 0xff])
    static let x86Code16 = Data([0x8d, 0x4c, 0x32, 0x08, 0x01, 0xd8, 0x81, 0xc6, 0x34, 0x12, 0x00, 0x00, 0x05, 0x23, 0x01, 0x00, 0x00, 0x36, 0x8b, 0x84, 0x91, 0x23, 0x01, 0x00, 0x00, 0x41, 0x8d, 0x84, 0x39, 0x89, 0x67, 0x00, 0x00, 0x8d, 0x87, 0x89, 0x67, 0x00, 0x00, 0xb4, 0xc6, 0x66, 0xe9, 0xb8, 0x00, 0x00, 0x00, 0x67, 0xff, 0xa0, 0x23, 0x01, 0x00, 0x00, 0x66, 0xe8, 0xcb, 0x00, 0x00, 0x00, 0x74, 0xfc])
    static let x86Code32 = Data([0x8d, 0x4c, 0x32, 0x08, 0x01, 0xd8, 0x81, 0xc6, 0x34, 0x12, 0x00, 0x00, 0x05, 0x23, 0x01, 0x00, 0x00, 0x36, 0x8b, 0x84, 0x91, 0x23, 0x01, 0x00, 0x00, 0x41, 0x8d, 0x84, 0x39, 0x89, 0x67, 0x00, 0x00, 0x8d, 0x87, 0x89, 0x67, 0x00, 0x00, 0xb4, 0xc6, 0xe9, 0xea, 0xbe, 0xad, 0xde, 0xff, 0xa0, 0x23, 0x01, 0x00, 0x00, 0xe8, 0xdf, 0xbe, 0xad, 0xde, 0x74, 0xff])
    
    static let m68kCode = Data([0xf0, 0x10, 0xf0, 0x00, 0x48, 0xaf, 0xff, 0xff, 0x7f, 0xff, 0x11, 0xb0, 0x01, 0x37, 0x7f, 0xff, 0xff, 0xff, 0x12, 0x34, 0x56, 0x78, 0x01, 0x33, 0x10, 0x10, 0x10, 0x10, 0x32, 0x32, 0x32, 0x32, 0x4C, 0x00, 0x54, 0x04, 0x48, 0xe7, 0xe0, 0x30, 0x4C, 0xDF, 0x0C, 0x07, 0xd4, 0x40, 0x87, 0x5a, 0x4e, 0x71, 0x02, 0xb4, 0xc0, 0xde, 0xc0, 0xde, 0x5c, 0x00, 0x1d, 0x80, 0x71, 0x12, 0x01, 0x23, 0xf2, 0x3c, 0x44, 0x22, 0x40, 0x49, 0x0e, 0x56, 0x54, 0xc5, 0xf2, 0x3c, 0x44, 0x00, 0x44, 0x7a, 0x00, 0x00, 0xf2, 0x00, 0x0a, 0x28, 0x4E, 0xB9, 0x00, 0x00, 0x00, 0x12, 0x4E, 0x75])
    
    static let sparcCode = Data([0x80, 0xa0, 0x40, 0x02, 0x85, 0xc2, 0x60, 0x08, 0x85, 0xe8, 0x20, 0x01, 0x81, 0xe8, 0x00, 0x00, 0x90, 0x10, 0x20, 0x01, 0xd5, 0xf6, 0x10, 0x16, 0x21, 0x00, 0x00, 0x0a, 0x86, 0x00, 0x40, 0x02, 0x01, 0x00, 0x00, 0x00, 0x12, 0xbf, 0xff, 0xff, 0x10, 0xbf, 0xff, 0xff, 0xa0, 0x02, 0x00, 0x09, 0x0d, 0xbf, 0xff, 0xff, 0xd4, 0x20, 0x60, 0x00, 0xd4, 0x4e, 0x00, 0x16, 0x2a, 0xc2, 0x80, 0x03])
    static let sparcCodeV9 = Data([0x81, 0xa8, 0x0a, 0x24, 0x89, 0xa0, 0x10, 0x20, 0x89, 0xa0, 0x1a, 0x60, 0x89, 0xa0, 0x00, 0xe0])

    static let evmCode = Data([0x60,0x61,0x50])
    
    static let mipsCode = Data([0x0C, 0x10, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x24, 0x02, 0x00, 0x0c, 0x8f, 0xa2, 0x00, 0x00, 0x34, 0x21, 0x34, 0x56])
    static let mipsCode2 = Data([0x56, 0x34, 0x21, 0x34, 0xc2, 0x17, 0x01, 0x00])
    static let mipsCode32R6M = Data([0x00, 0x07, 0x00, 0x07, 0x00, 0x11, 0x93, 0x7c, 0x01, 0x8c, 0x8b, 0x7c, 0x00, 0xc7, 0x48, 0xd0])
    static let mipsCode32R6 = Data([0xec, 0x80, 0x00, 0x19, 0x7c, 0x43, 0x22, 0xa0])
    static let mipsCode64SD = Data([0x70, 0x00, 0xb2, 0xff])
}

struct Tests {
    static let armTests = [
        PlatformTest(name: "ARM",
                     arch: .arm,
                     mode: [Mode.arm.arm],
                     code: Code.armCode1),
        PlatformTest(name: "Thumb",
                     arch: .arm,
                     mode: [Mode.arm.thumb],
                     code: Code.thumbCode1),
        PlatformTest(name: "Thumb-mixed",
                     arch: .arm,
                     mode: [Mode.arm.thumb],
                     code: Code.armCode2),
        PlatformTest(name: "Thumb-2 & register named with numbers",
                     arch: .arm,
                     mode: [Mode.arm.thumb],
                     code: Code.thumbCode2,
                     options: [.syntax(syntax: .noRegName)]),
        PlatformTest(name: "Thumb-MClass",
                     arch: .arm,
                     mode: [Mode.arm.thumb, Mode.arm.mClass],
                     code: Code.thumbMClass),
        PlatformTest(name: "Arm-V8",
                     arch: .arm,
                     mode: [Mode.arm.arm, Mode.arm.v8],
                     code: Code.armV8)
    ]
    
    static let arm64Tests = [
        PlatformTest(name: "ARM-64",
                     arch: .arm64,
                     mode: [Mode.arm.arm],
                     code: Code.arm64Code1)
    ]
    
    static let ppcTests = [
        PlatformTest(name: "PPC-64",
                     arch: .ppc,
                     mode: [Mode.endian.big],
                     code: Code.ppcCode1),
        PlatformTest(name: "PPC-64 + QPX",
                     arch: .ppc,
                     mode: [Mode.endian.big, Mode.ppc.qpx],
                     code: Code.ppcCode2),
    ]
    
    static let x86Tests = [
        PlatformTest(
            name: "X86 16bit (Intel syntax)",
            arch: .x86,
            mode: [Mode.bits.b16],
            code: Code.x86Code16),
        PlatformTest(
            name: "X86 32 (AT&T syntax)",
            arch: .x86,
            mode: [Mode.bits.b32],
            code: Code.x86Code32,
            options: [.syntax(syntax: .att)]),
        PlatformTest(
            name: "X86 32 (Intel syntax)",
            arch: .x86,
            mode: [Mode.bits.b32],
            code: Code.x86Code32),
        PlatformTest(
            name: "X86 64 (Intel syntax)",
            arch: .x86,
            mode: [Mode.bits.b64],
            code: Code.x86Code64)
    ]
    
    static let m68kTests = [
        PlatformTest(
            name: "M68K",
            arch: .m68k,
            mode: [Mode.m68k.mc68040, Mode.endian.big],
            code: Code.m68kCode)
    ]
    
    static let sparcTests = [
        PlatformTest(
            name: "Sparc",
            arch: .sparc,
            mode: [Mode.endian.big],
            code: Code.sparcCode),
        PlatformTest(
            name: "SparcV9",
            arch: .sparc,
            mode: [Mode.endian.big, Mode.sparc.v9],
            code: Code.sparcCodeV9)
    ]
    
    static let evmTests = [
        PlatformTest(
            name: "EVM",
            arch: .evm,
            mode: [],
            code: Code.evmCode)
    ]
    
    static let mipsTests = [
        PlatformTest(
            name: "MIPS-32 (Big-endian)",
            arch: .mips,
            mode: [Mode.bits.b32, Mode.endian.big],
            code: Code.mipsCode),
        PlatformTest(
            name: "MIPS-64-EL (Little-endian)",
            arch: .mips,
            mode: [Mode.bits.b64, Mode.endian.little],
            code: Code.mipsCode2),
        PlatformTest(
            name: "MIPS-32R6 | Micro (Big-endian)",
            arch: .mips,
            mode: [Mode.mips.mips32r6, Mode.mips.micro, Mode.endian.big],
            code: Code.mipsCode32R6M),
        PlatformTest(
            name: "MIPS-32R6 (Big-endian)",
            arch: .mips,
            mode: [Mode.mips.mips32r6, Mode.endian.big],
            code: Code.mipsCode32R6),
        PlatformTest(
            name: "MIPS-64-EL + Mips II (Little-endian)",
            arch: .mips,
            mode: [Mode.bits.b64, Mode.mips.mips2, Mode.endian.little],
            code: Code.mipsCode64SD),
        PlatformTest(
            name: "MIPS-64-EL (Little-endian)",
            arch: .mips,
            mode: [Mode.bits.b64, Mode.endian.little],
            code: Code.mipsCode64SD),
        
    ]
}
